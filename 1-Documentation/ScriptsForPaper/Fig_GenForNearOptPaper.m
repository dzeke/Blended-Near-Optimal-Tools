%% FigGenForNearOptPaper.m
% Matlab 2013b Script to generate Figures in the paper
% 
% David E. Rosenberg (in review) "Near-optimal alternative generation,
% visualization, and interaction for water resources decision making".
% Water Resources Research. Resubmitted December 2014
%
% The script automatically generates Figures 1, 2, 3, and 5.
% The script also provides in-comment instructions to interactively produce
%   - Figure 4 from Figure 3
%   - Figure 5 from Figure 3
%   - Figure 6 from Figure 5
%   - Figure 7 from Figure 3
%
% The script also provides commands and directions to produce all the
% figures and data used to support results not shown statements in the
% paper. The script asks the user whether they want to generate these.
%
% #####################
%   Programmed by David E. Rosenberg
%   August 2014
%   Updated December 2014 to include changes in the second manuscript revision
%   
%   Dept. of Civil & Env. Engineering and Utah Water Research Lab
%   Utah State University
%   david.rosenberg@usu.edu
%
%   Citation:
%   David E. Rosenberg (in review) "Near-optimal alternative generation,
%   visualization, and interaction for water resources decision making".
%   Water Resources Research. Submitted August 2014

%   Licensing:
%   This code is distributed AS-IS with no expressed or implied warranty regarding the claimed functionality. The entire code or parts 
%   may be used for non-commercial purposes so long as the use is cited per the citation above. Use for any commercial purpose requires 
%   prior written permission from the author.
%
%   Bug Reports and Feedback:
%   Bug reports and Feedback are much appreciated. Please submit via the the issue tracker on the
%   GitHub repository where you downloaded this file.
%   Note that while much appreciated, there is no promise of when, or if, a reported bug will be corrected.

%% Generating the Figures

% #### Figure 1 ####
% Figure 1.	Comparison of the optimal solution and Modelling to Generate Alternatives (MGA) results 
% to the near-optimal region for an example two-decision problem with a quadratic objective function, 
% four linear constraints, tolerable deviation of gamma=1.80, and generation density of 0.5 alternatives per decision 
% variable for the MGA-Serial method that is three times larger than the density reported in any prior application.
%
% The last setting of zero automatically labels the countours. Set to 1 to
% mannually label.
%
% Also, the alternatives generated by the MGA-Serial method may differ slightly
% from run to run because of the stochastic way the Matlab Global Search
% function searches for the optimal (distance maximizing) alternatives.
%
[fig1, fig2] = Fig1_FeasibleNearOptCompare([1 -20 10 0 100], [3 2;0 1], ['<' '<'], [12 4]','min',1.8,14, ...
         {'Decision Variable 1 (X_1)' 'Decision Variable 2' '(X_2)'},20,0,[1 0 15;2 0 1],0);
set(fig1,'NumberTitle','off','Name','Near-Optimal Figure 1. Near-optimal region for example problem');

%%
% #### Figure 2 ####
% Figure 2.	Parallel Coordinate plot that shows the optimal solution, feasible, and near-optimal regions across the linked
% objective (left most axis and left scale) and decision (right two axes and right scale) spaces for the example problem in Figure 1.
%
% Figure 2 is generated as part of the running the script above for Figure 1.
set(fig2,'NumberTitle','off','Name','Near-Optimal Figure 2. Parallel Coordinate plot of the example problem in Figure 1');

%%
% #### Figure 3 ####
% Some 2,500 stratified-sampled near-optimal phosphorus removal strategies for Echo Reservoir, Utah (green lines) 
% more completely cover in shorter run time the region within 110% of the optimal removal cost than 13 alternatives 
% serially generated by the Modelling to Generate Alternatives method (purple lines) or the optimal solution (black line).
%
% Note the last parameter of the statement below permits serial generation
% for up to 50 alternatives. However, the script cuts off after the runtime
% for MGA-Serial surpasses the logged runtime to stratify sample the 2500
% alternatives.
%
[mResult nObjs vParams] = LoadEchoGamsResultsMGAComp('WQNE_outG6.gdx',3,2500,0,[2 0 50]);
set(gcf,'NumberTitle','off','Name','Near-Optimal Figure 3. Compare optimal solution, MGA, and near-optimal region for Echo Reservoir problem');

%%
% #### Figure 4 ####
% Figure 4.	Exploring the effects (orange lines and slider heights) to not stabilize stream banks
% in Chalk Creek (first checked axis and slider) but shift and increase phosphorus removal in the 
% Weber above and below Wanship sub-watersheds (second and third checked axes and sliders) in a sub-space
% of the near-optimal region (green lines) where the Modelling to Generate Serial method did not generate 
% alternatives (purples lines).
%

% Interactive Steps To Shift, Increase stream bank stabilization
%   1. Generate Figure 3. At the commnad prompt paste:
%           >> [mResult nObjs vParams] = LoadEchoGamsResultsMGAComp('WQNE_outG6.gdx',3,2500,0,[2 0 50]);
%   2. Once the figure finally loads, show the control panel. From the Controls menu=>uncheck Hide all
%       controls
%   3. Click the Interact tab
%   4. From the Controls Menu=>Sliders=>uncheck Hide sliders (show them).
%       Sliders will appear on the plot all set to minimum allowable values
%   5. Check the box for Stabilize stream banks in Chalk Creak (set level to zero).
%   6. Set the slider to Stabilize Stream banks in the Weber below Wanship
%       sub-watershed to 3150 kg. Or in the Filter Exisiting Alternatives box,
%       enter 21 in the box '1st Decision axis to list' to bring the set value box for
%       the axis to the top of the list, then enter 3150 in the Set value text box just under the Removal Cost box and check
%       the box below the axis on the plot. Ranges for other sliders will update.
%   7. Set the slider for Stabilize stream banks in the Weber above Wanship
%       sub-watershed to 3,700 kg (or enter, enter 30 in the 1st Decision axis to list box, enter the value in
%       the set box for the axis, and check the box below the axis on the plot). Again, other sliders will update.
%   8. In the Generate New Alternatives box, click the Generate button. The
%       command window will update with info on the alternative generation. A new group of
%       lines will add to the plot (in peach).
%   9. Format the plot to compare to previous settings.
%        - Click the Display tab
%        - Enter a new name for the new second group in peach (e.g, 'Shifted stream bank' 
%        - Change the Ord (Order) for the group from 2 to 3.
%        - Similarly, change the order for the MGA group to 2 and uncheck
%          the box at the right (do not show the MGA group)
%        - Click the Reorder Groups button
%   10. Retitle the figure. At the command promt, paste:
%        >> set(gcf,'NumberTitle','off','Name','Near-Optimal Figure 4. Shifted, increased stream bank stabilization');
%        
%   

%%
% #### Figure 5 ####
% Figure 5.	Comparing pareto solutions generated by the constraint method (thick black lines and black triangles), 
% 13 alternatives serially generated by the Modelling to Generate Alternatives (purple lines and purple circle), 
% and stratified sampled near-optimal alternatives (green lines and green dots) for an updated multi-objective 
% formulation in linked objective-decision spaces (main parallel coordinate plot) and objective space (inset Cartesian plot).
%
% Automatically Generate
[mResult nO vParams] = LoadEchoGamsResultsMGAComp('WQNE_outG6.gdx',3,2500,1,[2 0 50]); %same as Figure 3 but second-to last parameter changed to 1
set(gcf,'NumberTitle','off','Name','Near-Optimal Figure 5. Comparisons for multi-objective problem');

% Alternative interactive steps to streamline the process to add a new objective and update the model formulation
%   1. Generate Figure 3. At the commnad prompt paste:
%          >> [mResult nO vParams] = LoadEchoGamsResultsMGAComp('WQNE_outG6.gdx',3,2500,0,[2 0 50]);
%   2. Once the figure finally loads, click the Update Formulation menu,
%      and select Add new objective(s).
%   3. In the Add New Objective(s) window, enter data for a single new
%      objective to maximize the mass of phosphorus removed. Enter the inputs
%      as:
%        - Number of new objectives: 1
%        - New objective function coefficients: ones(1,39)
%        - Labels: {'Phos. removed'}
%        - Units of measurement: {'kg'}
%        - Direction: {'max'}
%        - Near-optimal tolernace: 0.5
%        - Plot limits: [0; 18000]
%
%      Here, there is one new objective, the coefficients represent a row
%      vector of ones where every decision variable contributes equally to the
%      mass of phosphorus removed, the objective will be labeled 'Phos. removed' and quantified in kg, a new
%      constraint will be added to the formulation that requires removal
%      greater than 0.5*the maximumal removal (to prevent interaction with the existing near-optimal constraint
%      for the first cost removal objective, and the new objective will be
%      plotted between the limits of 0 and 18000 kg.
%
%        - At the bottom, click OK and Matlab will update the model
%          formulation, sample new alternatives, and add them as purple lines to the plot.
%
%   4. Format the plot.
%        - From the Controls menu, uncheck Hide all controls. The controls
%          menu will appear at the right.
%        - Click the Display tab. At the bottom is a listing of the groups.
%        - Enter new numbers in the Ord box so the group orders become:
%           + 3 Near-optimal (the original alternatives sampled from the single-objective formulation)
%           + 1 Near-optimal_Resample (the new alternatives sampled from the multi-objective formulation)
%           + 2 MGA (Modeling to generate alternatives loaded when Figure 3 was generated)
%          Then click the Reorder Groups button. The Near-optimal group
%          will now appear third in the list in peach and the lines on top.
%        - Merge the NewOpt (optimal solution for the new objective) and Optimum (optimum solution for the original objective)
%          groups into a single Pareto group
%           + Uncheck all the groups except those groups.
%           + Rename the first group Pareto
%           + Click the Merge Checked Groups button
%        	+ Set the Highlight Group Button to Pareto and the two pareto
%        	solutions will plot on top in thick black.
%        - From the Controls menu, select Show inset plot to make the
%           pareto-tradeoff inset plot visible. The plot shows the two objectives, two
%           pareto solutions at the corners and the newly sampled alternatives
%           (green triangels) well distrubted in the pareto objective space.
%           The alternatives sampled originally for only one objective (peach crosses) are less well
%           distributed in the pareto space.
%        - Uncheck the 3rd group (peach Near-optimal) and click the Show
%           Checked Groups button. Only the pareto solutions, newly-sampled and
%           MGA alternatives will show.
%    5. To load more intermediary pareto solutions between the two
%       extreme solutions:
%        - From the Plot Data menu, select Save data to save the model data
%           back to the Base Workspace.
%        - At the Matlab command prompt, retrieve the model constraints, objective function, and near-optimal data from
%           parameters #38, 40, etc. in no_vargs. i.e.,
%
%            >> ProbForm = no_vargs{38};
%            >> cFunc = no_vargs{40};
%            >> Tolerance = no_vargs{4};
%            >> NearOptConstraint = no_vargs{74};
%            >> OptSols = no_vargs{76};
%
%        - Update the right-hand side coefficients of the inequality constraints for the rows that
%        represent near-optimal tolerance constraints:
%
%            >> ProbForm.aineq(NearOptConstraint) = sign(ProbForm.aineq(NearOptConstraint)).*Tolerance'.*diag(no_mObjs(OptSols,:))
%
%             The sign preserves the direction of the optimization and the
%             diag pulls out the diagnal value from the matrix of objective function
%             values.
%
%        - Use the Matlab linprog function to calculate pareto-optimal
%           solutions such as by the constraint method or another pareto solution generation method.
%        - Organize results from the prior step into two matrices where
%           each of the nNew rowd represents a pareto solution.
%           + mObjPareto : nNew x 2 (values for objective functions 1 and 2
%               in columns 1 and 2)
%           + mDecPareto : nNew x 39 (values for each decision variable in
%               columns 1..39).
%        - Back in the Figure window, from the Plot Data menu, select Load
%        Data.... In the Load Data window that opens, enter:
%           + New objective function values: mObjPareto
%           + New decision varaible values: mDecPareto
%           + Group name(s): 'Pareto'
%
%           + Then click OK and the new pareto solutions will be shown on
%           the plot.


%%
% #### Figure 6 ####
% Figure 6.	Sub-region of near-optimal alternatives that remove large amounts of 
% phosphorus (orange lines and crosses) but use more varied locations and practices 
% than either pareto solutions (thick black lines and black triangles) or MGA-Serial alternatives (purple lines and circles).  
%
 
% Interactive Steps to generate alternatives that remove a lot of phosphorus
%   1. Generate Figure 5. At the commnad prompt paste:
%          >> [mResult nO vParams] = LoadEchoGamsResultsMGAComp('WQNE_outG6.gdx',3,2500,1,[2 0 50]);
%   2. Once the figure finally loads, show the control panel. From the Controls menu=>uncheck Hide all
%       controls
%   3. Once the figure finally loads, click the Interact tab
%   4. Just above the Generate New Alternatives box, enter 0.65 for the
%       Allowable Deviation (this setting will select alternatives that have
%       values of the (Set value +/- Error). Here error is measured as a
%       fraction of the tick spacing (0.65 of the tick spacing of 4000 = 
%   5. From the Controls Menu=>Sliders=>uncheck Hide sliders (show them).
%       Sliders will appear on the plot all set to minimum allowable values
%   6. Set the slider for the Phos. Removed axis to it's upper extent.
%       Or in the Filter Exisiting Alternatives box,
%       enter 14450 kg in text box for the axes and check the box below the axis on the plot.
%       Other the ranges for other sliders will update.
%   7. In the Generate New Alternatives box, click the Generate button. The
%       command window will update with info on the alternative generation. A new group of
%       lines will add to the plot (in purple).
%   8. Format the plot to compare to previous settings.
%        - Click the Display tab
%        - Enter a new name for the new second group that is now in purple (e.g, 'Large phos. removal' 
%        - Change the Ord (Order) for this group from 2 to 3.
%        - Similarly, change the order for the MGA group to 2 from 3
%        - Click the Reorder Groups button
%        - Hide the sliders and check boxes (Controls menu=>Sliders=>check
%           Hide sliders; Controls menu=>Axes checkboxes=>Hide checkboxes)
%    9. Retitle the figure. At the command prompt, enter:
%           >> set(gcf,'NumberTitle','off','Name','Near-Optimal Figure 6. Alternatives that remove lots of phosphorus');
%   

%%
% #### Figure 7 ####
% Progressive effects of relaxing the near-optimal tolerance parameter on ranges of allowable phosphorus
% removal for each practice. Green shading redundantly denotes removal cost and varies in 5% increments
% from dark green (optimal cost) to light green (125% of optimal cost).
%    
% Interactive Steps To Generate alternatives in an expanded near-optimal region
%   1. Generate Figure 3. At the commnad prompt paste:
%          >> [mResult nO vParams] = LoadEchoGamsResultsMGAComp('WQNE_outG6.gdx',3,2500,0,[2 0 50]);
%   2. Once the figure finally loads, show the control panel. From the Controls menu=>uncheck Hide all
%       controls
%   3. On the Interact tab, set the Near Optimal Tolerance to 1.25
%   4. In the Generate New Alternatives box, click the Generate button. The
%       command window will update with info on the alternative generation. A new group of
%       lines will add to the plot (in purple).
%   5. Format the plot to compare to previous settings.
%        - Click the Display tab
%        - In the Group Traces pane, enter a new name for the new second group in purple (e.g, 'Tolerance 1.25' 
%        - Change the Ord (Order) for the 2nd purple group from 2 to 1.
%        - Similarly, change the order for the first green group from 1 to
%        2ide it)
%        - Uncheck the MGA-Serial group (to hide it)
%        - Click the Reorder Groups button and the Tolerance 1.25 group
%        will plot in green behind the prior Near-optimal 1.10 group (now purple) and it is possible to see
%        the effects of expanding the near-optimal tolerance from 110% (original) to 125% (new group).
%   6. To show the color ramp of continuous effects of all changes from 1.0 to 1.25:
%        - Click the Color Ramp tab
%        - Enter the # Color classes as 5
%        - Set Direction to Descend
%        - Check the box associated with the Removal Cost axis (far left parallel coordinate axis)
%        - On the Color Ramp tab, check the box labeled Ramp color. The
%           color ramp will appear. Additionally, a checkbox for each color band
%           will appear on the Color Ramp tab. Uncheck one or more bands to hide the traces
%           in the respective bands.
%    7. Re-title the figure. Run the command at the command promp:
%         >>  set(gcf,'NumberTitle','off','Name','Near-Optimal Figure 7. Expanded near-optimal region');      

bReply = questdlg(['Finished auto-generating Figures 1, 2, 3, and 5. To interactively create Figures 4, 6, and 7 from Figures 3 and 5, ' ...
       ' see the further steps for each figure listed as comments in the script. Continue to generate results not shown?'],'Continue...?','Yes','No','No');

if strcmpi(bReply,'Yes')
    %% Results discussed in the text but not shown
    % Commands used to generate results that are discussed in the paper text
    % but not presented
    %
    % SECTION 2
    % Run times for both MGA methods rapidly increase with the number of alternatives generated

    % Example that runs MGA-Serial up to 20 alternatives on the Figure 1 example and MGA-Simultaneous at 10 and 20 alternatives
    % Run time results are printed to two tables in the command window. The
    % first table starts below 'MGA-Serial' and shows commulative run time by
    % serial iterations. The second table shows final run times for each
    % method. Note the figure generated will be crowded with results from the
    % four MGA runs.
    [fig1, fig2] = Fig1_FeasibleNearOptCompare([1 -20 10 0 100], [3 2;0 1], ['<' '<'], [12 4]','min',1.8,14, ...
              {'Decision Variable 1 (X_1)' 'Decision Variable 2' '(X_2)'},20,0,[1 0 15;2 0 20; 3 0 10; 3 0 20],0);
    set(fig1,'NumberTitle','off','Name','Near-Optimal Extra 1: Run times for MGA methods increase...');

    % SECTION 6.2
    % Additional testing (results not shown) found:

    % A) Generating 25 alternatives increased MGA-Serial runtime to 105 s with no
    %    appreciable change in the phosphorus removal practices implemented

    %    No stratify sample, 25 alternatives specified for MGA-Serial, run time
    %    liisted in the table in the command window.
         [mResult nObjs vParams] = LoadEchoGamsResultsMGAComp('WQNE_outG6.gdx',3,0,0,[2 0 25]);
          set(gcf,'NumberTitle','off','Name','Near-Optimal Extra 2: Run time for MGA-Serial increases...');
    %
    % B) MGA-HSJ generated...
    %
    %    First entry in the last parameter [1 0 50] calls and runs HSJ in Matlab until a stop criteria is reached using
    %    the current model formulation with phosphorus removed decision variables (50 is larger than the number
    %    of decision variables in the problem and max number of alternatives HSJ can generate).
    %    Second row loads HSJ results from GAMS that worked on the model
    %    version with land area and stream bank length decision variables.
    %    The number of alternatives generated is reported in the table in the command window.
         [mResult nObjs vParams] = LoadEchoGamsResultsMGAComp('WQNE_outG6.gdx',3,2500,0,[1 0 50;4 0 0]);
         set(gcf,'NumberTitle','off','Name','Near-Optimal Extra 3: Hop Skip Jump results');     
    %    To look more closely at the values for non-zero decision variables:
    %      a. On the plot, select the menu Plot Data=>Save Data (Cntrl-D) to
    %              save the data to the base workspace.
    %      b. To see the number of decision variables below the extents of
    %           stratified sampled near-optimal alternatives, enter the commend:
    %           >> sum(max(no_mDecs(strcmpi(no_vargs{28},'MGA-HSJ'),:))' < max(no_mDecs(strcmpi(no_vargs{28},'Near-optimal'),:))')
    %      c. To see which variables are below the extents identified by stratified sampling, enter the commands:
    %           >> actFull = [ no_vargs{26} no_vargs{48}' ]
    %           >> actFull(max(no_mDecs(strcmpi(no_vargs{28},'MGA-HSJ'),:))' < max(no_mDecs(strcmpi(no_vargs{28},'Near-optimal'),:))')
    %      d. To see similar results for GAMS model with land area and stream
    %         bank lenght decision variables, sbustitute 'MGA-GAMS-HSJ' for
    %         'MGA-HSJ', e.g.
    %           >> sum(max(no_mDecs(strcmpi(no_vargs{28},'MGA-GAMS-HSJ'),:))' < max(no_mDecs(strcmpi(no_vargs{28},'Near-optimal'),:))')     

    % C) Five MGA-Simultaneous trials each generated ten alternatives in 100 to 500 s that implemented 
    %    up to six phosphorus removal practices in each sub-watershed.
          [mResult nObjs vParams] = LoadEchoGamsResultsMGAComp('WQNE_outG6.gdx',3,2500,0,[3 0 10; 3 0 10; 3 0 10; 3 0 10; 3 0 10]);
          set(gcf,'NumberTitle','off','Name','Near-Optimal Extra 4: MGA-Simultaneous results across 5 trials');  
          
    % D) Overlay all the MGA-HSJ, Serial, and Simultaneous results ontop of
    %    each other
          [mResult nObjs vParams] = LoadEchoGamsResultsMGAComp('WQNE_outG6.gdx',3,2500,0,[1 0 50; 2 0 50; 3 0 10; 4 0 0]);
          set(gcf,'NumberTitle','off','Name','Near-Optimal Extra 5: All MGA results');          
    %    To look more closely at the values for non-zero decision variables:
    %      a. On the plot, select the menu Plot Data=>Save Data (Cntrl-D) to
    %              save the data to the base workspace.
    %      b. To see the number of decision variables where the MGA methods
    %      generate an extent BELOW the extents identified by the stratified sampled near-optimal
    %      alternatives, enter the commend:
    %           >> sum(max(no_mDecs(strcmpi(no_vargs{28},'MGA-HSJ')+strcmpi(no_vargs{28},'MGA-Serial')+strcmpi(no_vargs{28},'MGA-Sequential')>0,:))' < max(no_mDecs(strcmpi(no_vargs{28},'Near-optimal'),:))')
    %
    %      c. Similarly, the number of decision variables where at least
    %      one of the MGA methods identifies the same extents as identified
    %      by the stratified sampling method, enter:
    %           >> size(no_mDecs,2) - sum(max(no_mDecs(strcmpi(no_vargs{28},'MGA-HSJ')+strcmpi(no_vargs{28},'MGA-Serial')+strcmpi(no_vargs{28},'MGA-Sequential')>0,:))' < max(no_mDecs(strcmpi(no_vargs{28},'Near-optimal'),:))')
    %   
    % E) Compare more closely HSJ formulations
          [mResult nObjs vParams] = LoadEchoGamsResultsMGAComp('WQNE_outG6.gdx',3,2500,0,[1 0 50; 4 0 0; 5 0 0]);
          set(gcf,'NumberTitle','off','Name','Near-Optimal Extra 5: All HSJ results');   
          % MGA-GAMS-HSJ = on original model formulation with land
          %     area/streambank length decision variables in GAMS
          % MGA-HSJ = on current version of the model with phosphorus
          %     remval variables in Matlab
          % MGA-HSJ-Orig = on original model formulation with land
          %     area/streambank length decision variables in Matlab
          %
          % MGA-GAMS-HSJ and MGA-HSJ-Orig should be the same but differ
          % slightly because of the LP solvers used (multiple optimal on each HSJ solve)
 
    %
    % F) Interactive steps to generate multiple global optima solutions
    %   1. Generate Figure 3 minus the MGA solutions. At the commnad prompt paste:
    %      >>  [mResult nObjs vParams] = LoadEchoGamsResultsMGAComp('WQNE_outG6.gdx',3,2500,0,0);
    %      >>  set(gcf,'NumberTitle','off','Name','Near-Optimal Extra 6: Global Optima solution');   

    %   2. Once the figure finally loads, show the control panel. From the Controls menu=>uncheck Hide all
    %       controls
    %   3. On the Interact tab, set the Near Optimal Tolerance to 1.0
    %   4. In the Generate New Alternatives box, click the Generate button. The
    %       command window will update with info on the alternative generation. A new group of
    %       lines will add to the plot (in purple).
    %   5. On the Display tab, enter a new name for the group, e.g., 'Global optima'

    % 
end
